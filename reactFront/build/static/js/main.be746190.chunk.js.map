{"version":3,"sources":["components/Counter.js","module/partActionReducer.js","reducers/counter.js","containers/CounterCon.js","module/pendReducer.js","module/requestSaga.js","module/axios.js","reducers/counterSaga.js","reducers/restAPI/counterRest.js","containers/CounterSaga.js","App.js","serviceWorker.js","module/mergeReducer.js","reducers/index.js","index.js"],"names":["Counter","onIncrease","onDecrease","number","onClick","partActionReducer","handlerMap","initState","state","action","produce","draft","handler","type","increment","createAction","decrement","counter","count","payload","counterDUX","CounterCon","useSelector","dispatch","useDispatch","pass","a","pending","finish","requestStateReducer","createActionTypes","client","axios","create","saga","COUNTER_SAGA","COUNTER_SUCCESS","COUNTER_FAILURE","counterSagaAction","counterSaga","req","success","failure","put","call","response","data","error","createRequestSaga","add","axiosCon","get","takeLatest","reducer","restCount","console","log","CounterSaga","App","Boolean","window","location","hostname","match","reducers","rootSaga","rootReducer","pendReducer","reduce","acc","r","nextState","all","sagaMiddleWare","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be746190.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Counter = ({ onIncrease, onDecrease, number }) => {\r\n  return (\r\n    <div>\r\n      <h1>{number}</h1>\r\n      <div>\r\n        <button onClick={onIncrease}>+1</button>\r\n        <button onClick={onDecrease}>-1</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;","import produce from 'immer';\r\nfunction partActionReducer(handlerMap,initState={}){\r\n   return function (state = initState ,action){\r\n     return produce(state, draft =>{\r\n         const handler= handlerMap[action.type];\r\n         if(handler) handler(draft, action);\r\n     })\r\n   }\r\n}\r\nexport default partActionReducer;","import partActionReducer from '../module/partActionReducer';\r\nimport { createAction } from 'redux-actions';\r\n\r\nexport const INCREMENT = `counter/INCREMENT`;\r\nexport const DECREMENT =`counter/DECREMENT`;\r\nexport const SET_COUNT= `counter/SET_COUNT`;\r\n\r\nexport const increment = createAction(INCREMENT);\r\nexport const decrement = createAction(DECREMENT);\r\nexport const setCount = createAction(SET_COUNT);\r\n\r\n\r\nconst initialState = {  //이 프로젝트는 mergeReducer쓰니까.\r\n                        // initialStater객체가 곧 state라고 \r\n  count:0,             // 보면 편함. 하나의 객체로 합쳐버리니까 , \r\n}\r\n\r\nconst counter = partActionReducer({\r\n  [INCREMENT]: (draft ,action)=>(draft.count+=1),\r\n  [DECREMENT]: (draft ,action)=>(draft.count-=1),\r\n  [SET_COUNT]: (draft, action)=>(draft.count = action.payload.count)\r\n},initialState);\r\n\r\nexport default counter;","import React from 'react';\r\n\r\nimport {useSelector , useDispatch } from 'react-redux';\r\nimport Counter from '../components/Counter';\r\nimport * as counterDUX  from '../reducers/counter';\r\nconst {increment ,decrement} = counterDUX;\r\n\r\nfunction CounterCon() {\r\n const number= useSelector((state)=>(state.count),[]);\r\n const dispatch  = useDispatch();\r\n   const handleIncrement = (payload)=>{\r\n     dispatch(increment(payload));\r\n }\r\n   const handleDecrement= (payload)=>{\r\n    dispatch(decrement(payload));\r\n  }\r\n  return (\r\n   <>\r\n     <Counter onIncrease={ handleIncrement } \r\n       onDecrease ={ handleDecrement } number={ number }   />\r\n   </>\r\n  );\r\n}\r\n\r\nexport default CounterCon;\r\n","\r\nimport {createAction} from 'redux-actions';\r\nimport partActionReducer from './partActionReducer';\r\n\r\nexport const PENDING ='PENDING/REQUESTSAGA';\r\nexport const FINISH = 'finish/REQUESTSAGA';\r\nconst pass = a => (a);\r\n\r\nexport const pending= createAction(\r\n    PENDING,\r\n    pass\r\n)\r\n\r\nexport const finish= createAction(\r\n    FINISH,\r\n    pass\r\n)\r\n\r\nconst requestStateReducer = partActionReducer({\r\n    [PENDING]:(draft , action)=>{ draft[action.payload]=true},\r\n    [FINISH]:(draft , action)=>{ draft[action.payload]=false}\r\n  },{});\r\n\r\n\r\n  export default requestStateReducer;","import {put,call} from 'redux-saga/effects';\r\nimport { pending ,finish } from './pendReducer';\r\n\r\n// const PENDING ='PENDING/REQUESTSAGA';\r\n// const FINISH = 'finish/REQUESTSAGA';\r\n\r\n\r\n// const pass = a => (a);\r\n\r\n// const pending= createAction(\r\n//     PENDING,\r\n//     pass\r\n// )\r\n\r\n// const finish= createAction(\r\n//     FINISH,\r\n//     pass\r\n// )\r\n\r\nexport const createActionTypes = type =>{\r\n      const success = `${type}_SUCCESS`;\r\n      const failure = `${type}_FAILURE`;\r\n    return [success, failure,type];\r\n}\r\n\r\nexport const createRequestSaga = (type, req)=>{\r\n   const [success, failure]=  createActionTypes(type);\r\n\r\n   return function*(action){\r\n          yield put(pending(type));\r\n        try{\r\n            const response= yield call(req, action.payload);\r\n            yield put({\r\n                type:success,\r\n                payload: response.data,\r\n            });\r\n\r\n        }catch(e){\r\n            yield put({\r\n                type:failure,\r\n                payload: e,\r\n                error:true       \r\n            });\r\n        }finally{\r\n           yield put(finish(type));\r\n        }\r\n   }\r\n}\r\n\r\n// export const requestStateReducer = partActionReducer({\r\n//   [PENDING]:(draft , action)=>{ draft[action.payload]=true},\r\n//   [FINISH]:(draft , action)=>{ draft[action.payload]=false}\r\n// },{});\r\n\r\n\r\n","import axios from 'axios';\r\nconst client = axios.create();\r\n\r\n//client.defaults.baseURL= \"http://localhost:4000/\";\r\n\r\nexport default client;","import {createRequestSaga,createActionTypes } from '../module/requestSaga'\r\nimport partActionReducer from '../module/partActionReducer';\r\nimport {getCounter} from './restAPI/counterRest';\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport {createAction} from 'redux-actions';\r\n\r\nexport const COUNTER_SAGA = 'SAGA/COUNTER';\r\n\r\nconst [ COUNTER_SUCCESS , COUNTER_FAILURE]= createActionTypes(COUNTER_SAGA)\r\n\r\nexport const counterSagaAction = createAction(COUNTER_SAGA);\r\n\r\nconst counterSaga= createRequestSaga(COUNTER_SAGA,getCounter);\r\n\r\nconst initState= {\r\n    restCount:0\r\n}\r\n\r\nexport function *saga(){\r\n  yield takeLatest(COUNTER_SAGA,counterSaga);\r\n}\r\n\r\n\r\nexport const reducer = partActionReducer({\r\n[COUNTER_SUCCESS]:(draft, action)=>{\r\n  draft.restCount=action.payload.count\r\n},\r\n[COUNTER_FAILURE]:(draft, action)=>{\r\n    console.log('error');\r\n}},initState);","import axiosCon from '../../module/axios';\r\n\r\n\r\nexport const getCounter = (add=0)=>(axiosCon.get(`/api/counter/${add}`))","import React from 'react';\r\nimport Counter from '../components/Counter';\r\nimport {useSelector , useDispatch } from 'react-redux';\r\nimport * as counterSaga from '../reducers/counterSaga';\r\n\r\nconst {counterSagaAction} = counterSaga;  \r\n\r\nfunction CounterSaga(){\r\n    const number= useSelector((state)=>(state.restCount),[]);\r\n    const dispatch  = useDispatch();\r\n    const handleIncrement = (payload)=>{\r\n        dispatch(counterSagaAction(1));\r\n    }\r\n     const handleDecrement= (payload)=>{\r\n        dispatch(counterSagaAction(-1));\r\n     }\r\n \r\n  return(\r\n      <>\r\n        <Counter onIncrease={ handleIncrement } \r\n           onDecrease ={ handleDecrement } number={ number }   />\r\n           외부 rest server\r\n      </>\r\n  )\r\n\r\n}\r\n\r\nexport default CounterSaga;","import React from 'react';\r\nimport CounterCon from './containers/CounterCon';\r\nimport CounterSaga from './containers/CounterSaga';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CounterCon/>\r\n      <CounterSaga/>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default function mergeReducer(reducers){\r\n return (state, action)=>{\r\n     if(!state){ //state 초기값 일떄 모든 리듀스들의 초기값을 하나로 합친다.\r\n         return reducers.reduce((acc,r)=>({...acc, ...r(state,action) }),{});\r\n     }\r\n     let nextState= state;\r\n     for(const r of reducers){\r\n        nextState = r(nextState,action);\r\n     }\r\n     return nextState;\r\n }\r\n}\r\n\r\n","import mergeReducer from '../module/mergeReducer';\r\nimport counter from './counter';\r\nimport pendReducer from '../module/pendReducer';\r\nimport { all } from 'redux-saga/effects'\r\nimport * as counterSaga from './counterSaga';\r\n\r\n\r\nexport const rootReducer=mergeReducer([\r\n    counter,\r\n    counterSaga.reducer,\r\n    pendReducer\r\n]);\r\n\r\n\r\nexport function* rootSaga() {\r\n    yield all(\r\n        [ \r\n            counterSaga.saga(),\r\n        ]\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport  {rootReducer , rootSaga}   from './reducers';\r\n\r\nconst sagaMiddleWare= createSagaMiddleware();\r\nconst store= createStore(rootReducer ,composeWithDevTools(applyMiddleware(sagaMiddleWare)) );\r\nsagaMiddleWare.run(rootSaga);\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n   <App />\r\n</Provider>\r\n, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}